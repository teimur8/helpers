/*11 -------------------------*/
@mixin font-fl($font){
	&:after{
		@if(type-of($font) == string){ // !=
			content: 'Me font is: #{$font}.';
		}@else{
			content: 'Sorry, the argument #{$font} is a #{type-of($font)}.';
		}
	}
}

h2{
	@include font-fl(false);
}


/*#13 - Logical Operators*/
$var1: 'foo';
$var2: 'bas';

@mixin font-fl2(){
	&:after{
		@if $var1 == 'foo' and $var2 == 'bas'{
				content: 'var1 and var2 are true';
			}@else{
				content: 'var1 and var2 are false';
			}
	}
}

h2{
	@include font-fl2();
}



 /*#14 - String Operations*/
 $f_name: 'Timur';
 $l_name: 'Pupkin';

 @mixin string-full-name{
 	&:after{
 		content: "My name is " + $f_name + " " + $l_name;
 	}
 }

 h2{ @include string-full-name }



 /*#18 - Partials*/

@import "partials/_part";

#main {
	@import "partials/_part";
}





/*#20 - Mixins*/

$font-base: 16px;

@mixin samle{
	font-size: $font-base;
}

p{ 	@include samle; }



@mixin silly-links{
	a{
		color: blue;
		background-color: red;
	}
}

@include silly-links;



@mixin compoud{
	@include silly-links;
	/*...*/
}


@include compoud;




/*#21 - Mixins With Arguments*/

@mixin link ($link, $visit, $hover, $active: black){
	a{
		color: $link;
		&:visited{ color: $visit; };
		&:hover{ color: $hover; };
		&:active{ color: $active; };
	}
}

#main { @include link(white, blue, green, red);}
#main { @include link(white, blue, green);}


@mixin link2 ($link...){
	a{
		color: $link
	}
}
#main { @include link2(white blue, green, 2, false);}



/*#22 - Inheritance with @extend*/
 /*#23 - Placeholder Selectors*/

%message{
	border: 1px solid #ccc;
	padding: 10px;
	color: #333;
}

.message{
	border: 10px solid #ccc;
	padding: 100px;
	color: #333333;
}

.success{
	@extend %message;
	@extend .message;
}

.error{
	@extend .message;
	border-color: red;
}



/*#24 - Placeholder Extend vs. Mixin*/
/* миксины не группируют и не принимаю аргументы*/
@mixin message{
	border: 10px solid #ccc;
	padding: 100px;
	color: #333333;
}

.success{
	@include message;
}

.error{
	@include message;
	border-color: red;
}



/*#27 - Lists*/

$font-list: 'Raleway', 'Dosis', 'Lato';
// comma separeted elements

$pad-list: 10px 8px 12px;
// space separated elements

$multi-list: 'Roboto', 15px, 1.3em;
// has two list

@mixin list_print($list){

	@each $item in $list {
		$i: index($font-list, $item);
		.stugg-#{$i}{
			color:$item;
		}
	}
}


@include list_print($font-list);
@include list_print($pad-list);
@include list_print($multi-list);

h2{color: nth($multi-list, 2);} 	 // get element by index
h2{index: index($multi-list, 15px);} // get index by element



/*#29 - Maps*/

$colors-1:(
	'red': '#ff0000',
	'green': '#00ff00',
	'blue': '#0000ff',
);

@each $item in $colors-1 {
	.color-#{$item}{
		content: $item;
	}
}

@each $item-name, $item-code in $colors-1 {
	.color-#{$item-name}{
		content: $item-code;
	}
}




/*- #30 - @at-root*/
/* вытащит из родителя*/

.sub_parent{
	.parent{
		content: 'parent';
		.child{
			content: 'child';
		}
		@at-root .at_root_child{
			content: 'at_root_child';
		}
	}
}



/*#34 - Using Your Own Functions*/

@function calc_number($a, $b){
	@return $a + $b; 
};

#main{ padding: calc_number(10px, 56)}




/*#36 - @for Loops*/
@for $i from 1 through 3 {
	.item-#{$i} {width: 10px * $i }
}



/*#37 - @each Loops*/

@each $usr in bob, john, bill, mike {
	.#{$usr}-avatar{
		content: $usr;
	}
}


$alt: alert, yellow, red;
$sub: submit, white, greed;
$bck: back, blue, transparent;

@each $a, $b, $c in $alt, $sub, $bck{

	.#{$a}-button{
		color: $b;
		content: $c;
	}

}




/*#38 - @while Loops*/
$x:1;

@while $x < 13 {
	.col-#{$x} { width: (100/12 * $x) * 1%; }
	.col-#{$x} { width: (100/12 * $x) * 1px; }

	$x: $x + 1;
}